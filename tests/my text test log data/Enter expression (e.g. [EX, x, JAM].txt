Enter expression (e.g. ["EX", "x", "JAM"]):  ["APP", ["LAM", "x", ["EX", "x", "JAM"]], ["APP", ["LAM", "z", "z"], "y"]]
🔍 Parsing: ['APP', ['LAM', 'x', ['EX', 'x', 'JAM']], ['APP', ['LAM', 'z', 'z'], 'y']]
🔍 Parsing: ['LAM', 'x', ['EX', 'x', 'JAM']]
🔍 Parsing: x
🔍 Parsing: ['EX', 'x', 'JAM']
🔍 Parsing: x
🔍 Parsing: JAM
🔍 Parsing: ['APP', ['LAM', 'z', 'z'], 'y']
🔍 Parsing: ['LAM', 'z', 'z']
🔍 Parsing: z
🔍 Parsing: z
🔍 Parsing: y
Enter version tag (e.g. v1.0.0): applambda-1
Final state: State.ALIVE
Trace:
APP → ["APP(LAM(Var('x'), EX(Var('x'), Var('JAM'))), APP(LAM(Var('z'), Var('z')), Var('y')))", "APP(LAM(Var('z'), Var('z')), Var('y'))"]
LAM → ["LAM(Var('x'), EX(Var('x'), Var('JAM')))", "LAM(Var('z'), Var('z'))"]
VAR → ["Var('y')", "Var('JAM')"]
UNBOUND → ["Var('y')", "Var('JAM')"]
EX → ["EX(<State.VAC: 'VAC'>, Var('JAM'))"]
Final state: State.ALIVE
Trace:
APP → ["APP(LAM(Var('x'), EX(Var('x'), Var('JAM'))), APP(LAM(Var('z'), Var('z')), Var('y')))", "APP(LAM(Var('z'), Var('z')), Var('y'))"]
LAM → ["LAM(Var('x'), EX(Var('x'), Var('JAM')))", "LAM(Var('z'), Var('z'))"]
VAR → ["Var('y')", "Var('JAM')"]
UNBOUND → ["Var('y')", "Var('JAM')"]
EX → ["EX(<State.VAC: 'VAC'>, Var('JAM'))"]
➜ Diagram PNG: out\trace_20250626_1304.png
➜ Diagram SVG: out\trace_20250626_1304.svg
➜ Manifest JSON: out\manifest_20250626_1304.json


Perfect. You're now testing nested lambda application, where the inner APP reduces first and passes its result into the outer one:

🔍 Expression Breakdown:
lisp
Copy
Edit
APP(
  LAM(x, EX(x, JAM)),
  APP(LAM(z, z), y)
)
This should:

Evaluate APP(LAM(z, z), y) → yields "y" (identity)

Then apply outer lambda: LAM(x, EX(x, JAM)) with "x" = "y"

Result: EX(y, JAM)

✅ If your system is working, the trace should include:
"APP(LAM(Var('z'), Var('z')), Var('y'))"

"LAM(Var('x'), EX(Var('x'), Var('JAM')))"

"EX(Var('y'), Var('JAM'))"

Final state: State.ALIVE



elif name == "APP":
    lam = go(args[0])              # Should return a LAM Functor
    applied_arg = go(args[1])      # ✅ Evaluate the argument before applying



if lam.name == "LAM" and len(lam.args) == 2:
    param = lam.args[0]
    body = lam.args[1]
    if isinstance(param, Var):
        # Apply substitution into the lambda body
        substituted = substitute(body, param.name, applied_arg)
        return go(substituted)     # ✅ Evaluate the result after substitution




python main.py "[\"APP\", [\"LAM\", \"x\", [\"EX\", \"x\", \"JAM\"]], [\"APP\", [\"LAM\", \"z\", \"z\"], \"y\"]]"

python main.py [\"APP\", [\"LAM\", \"x\", [\"EX\", \"x\", \"JAM\"]], [\"APP\", [\"LAM\", \"z\", \"z\"], \"y\"]]


cd "C:\Users\Dell\Documents\logic-evaluation-engine"



["APP", ["LAM", "x", ["EX", "x", "JAM"]], ["APP", ["LAM", "z", "z"], "y"]]

print("🔎 TRACE KEY DEBUG:", node.name, type(node.name))




