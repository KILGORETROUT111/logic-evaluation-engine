{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Logic Evaluation Engine (LEE) 3.0","text":"<p>Basis5-driven phase dynamics for contradiction analysis and evaluation. Discrete rotations (ALIVE \u2192 JAM \u2192 MEM) with integer witnesses and auditable provenance.</p>"},{"location":"#what-is-lee","title":"What is LEE?","text":"<p>LEE is a lean engine that evaluates logical expressions and records a reproducible trail: - Phase geometry on a discrete circle (0\u00b0, 90\u00b0, 180\u00b0). - Witness projection (integers, not probabilities). - Deterministic provenance: JSONL timeline, SVG graph, Markdown summary. - Adapters (legal/medical) enrich signals without steering phases.</p>"},{"location":"#quick-start","title":"Quick start","text":"<pre><code>git clone https://github.com/KILGORETROUT111/logic-evaluation-engine.git\ncd logic-evaluation-engine\npython -m venv .venv\n.\\.venv\\Scripts\\Activate.ps1\npip install -e .\npytest -q        # expect green\n</code></pre> <p>Run a single expression:</p> <pre><code>python .\\scripts\\run_once.py --expr \"1 -&gt; 0\" --domain legal --log quick\n</code></pre> <p>Batch from a file:</p> <pre><code>python .\\scripts\\run_batch.py --file .\\scripts\\inputs.txt --domain legal --log-prefix smoke\n</code></pre> <p>Artifacts land in <code>data/logs/</code> with <code>.json</code>, <code>.prov.jsonl</code>, <code>.svg</code>, <code>.timeline.md</code> files.</p>"},{"location":"#docs-map","title":"Docs map","text":"<ul> <li>Getting started</li> <li>Phase geometry (Basis5)</li> <li>Adapter hooks</li> <li>API</li> <li>Contributing</li> </ul>"},{"location":"#versioned-docs-mike","title":"Versioned docs (Mike)","text":"<pre><code>mike deploy 3.0\nmike set-default latest\n# local preview\nmike serve -a 127.0.0.1:8000\n</code></pre>"},{"location":"#philosophy","title":"Philosophy","text":"<p>If the math doesn\u2019t project it, we don\u2019t code it. Basis5 is the source of truth; everything else annotates.</p>"},{"location":"ROADMAP/","title":"Logic Evaluation Engine (LEE) 3.0 \u2014 Basis5 Roadmap + Docs Routine","text":"<p>LEE is the phase geometry. All engine behavior is projected from Basis5 (ALIVE \u2192 JAM \u2192 MEM), material implication, and the witness algebra. If Basis5 can\u2019t project it, we don\u2019t code it. This file captures scope, contracts, tests, and the full MkDocs + Mike versioned-docs routine.</p>"},{"location":"ROADMAP/#tldr-whats-true-after-this-doc-lands","title":"TL;DR (What\u2019s true after this doc lands)","text":"<ul> <li>Single source of truth for geometry: <code>src/core/basis5.py</code>.</li> <li>Engine writes Basis5 geometry into JSON results, provenance lines, and memdb history.</li> <li>Existing suite remains green (24/24) and new Basis5 tests pass.</li> <li>Versioned docs published at <code>https://kilgoretrout111.github.io/logic-evaluation-engine/&lt;version&gt;/</code> via MkDocs + Mike.</li> </ul>"},{"location":"ROADMAP/#principles-non-negotiable","title":"Principles (Non-Negotiable)","text":"<ul> <li>Single source of truth: Only <code>src/core/basis5.py</code> may export geometry helpers.</li> <li>Conservative design: No features beyond Basis5 projection.</li> <li>Invariants: Sum of step rotations \u2261 total winding (mod 360). Witness integers drive JAM/MEM dynamics.</li> <li>Artifacts: Every run includes Basis5 fields in JSON, provenance, and memdb.</li> </ul>"},{"location":"ROADMAP/#repository-map-key-surfaces","title":"Repository Map (key surfaces)","text":"<pre><code>src/\n  core/\n    basis5.py            # \u2190 Basis5 geometry &amp; witness (single source of truth)\n  engine/\n    pipeline.py          # \u2190 phase transitions; result assembly; calls Basis5\n    provenance.py        # \u2190 recorder events; include Basis5 in transitions/detect\n    ...                  # other engine modules\ndocs/\n  index.md               # landing page\n  getting-started.md     # quickstart\n  phase-geometry.md      # Basis5 spec (phases, winding, witness, invariants)\n  api.md                 # public APIs that matter\n  adapter-hooks.md       # legal/medical shims and hook contracts\n  contributing.md        # dev workflow, tests, style\n.github/workflows/\n  ci.yaml                # tests + mkdocs build check\n</code></pre> <p>One <code>.md</code> per indexed item. Keep pages focused and short.</p>"},{"location":"ROADMAP/#basis5-contracts-apis-everyone-must-use","title":"Basis5 Contracts (APIs everyone must use)","text":"<p>Module: <code>src/core/basis5.py</code></p> <pre><code>def project_phase(phase: str) -&gt; dict: ...\ndef rotation_delta_deg(a: str, b: str) -&gt; int: ...\ndef transition_basis(a: str, b: str) -&gt; dict: ...\ndef build_winding(phases: list[str]) -&gt; dict: ...  # {steps, total_deg, phases}\ndef witness_basis(pattern: str) -&gt; dict: ...       # {implication, contradiction, detachment, ...}\n</code></pre> <p>Engine integration (additive, non-breaking)</p> <pre><code># pipeline.py \u2014 when transitioning phases:\nbasis5_t = transition_basis(phase_before, phase_after)\nrecorder.transition(phase_before, phase_after, details={\"basis5\": basis5_t})\nhistory[\"phases\"].append(phase_after)\n\n# before returning:\nresult[\"basis5\"] = {\n  \"phases\": history[\"phases\"],\n  \"winding\": build_winding(history[\"phases\"]),\n  \"witness\": witness_basis(pattern),   # normalized form, e.g. \"1 -&gt; 0\"\n}\n</code></pre> <pre><code># provenance.py \u2014 on detect/enrichment:\nenrichment = {\n  \"domain\": self.domain,\n  \"pattern\": pattern,            # normalized canonical form\n  \"score\": 0.5,\n  \"tags\": [\"implication\",\"boolean\"],\n  \"basis5_witness\": witness_basis(pattern),\n}\n</code></pre> <p>MemDB history lines include:</p> <pre><code>{\n  \"run_id\": \"...\",\n  \"final_phase\": \"MEM\",\n  \"basis5\": { \"total_deg\": 180, \"phases\": [\"ALIVE\", \"JAM\", \"MEM\"] }\n}\n</code></pre>"},{"location":"ROADMAP/#tests-to-add-keep-legacy-tests-untouched","title":"Tests to Add (keep legacy tests untouched)","text":"<ul> <li><code>tests/engine/test_basis5_geometry.py</code></li> <li>JAM sample (<code>1 -&gt; 0</code>): phases contain <code>ALIVE\u2192JAM\u2192MEM</code> (head or tail); <code>witness.implication == 1</code>.</li> <li>Invariant: <code>sum(\u0394\u03b8) % 360 == winding.total_deg</code>.</li> <li><code>tests/engine/test_provenance_basis5.py</code></li> <li>Every <code>transition</code> line has <code>details.basis5.delta_deg</code>.</li> <li><code>detect.details.enrichment.basis5_witness</code> present.</li> <li><code>tests/engine/test_memdb_basis5.py</code></li> <li>Patient/case last history line has <code>final_phase</code>, <code>basis5.total_deg</code>, <code>basis5.phases</code>.</li> </ul> <p>All tests read Basis5 from engine outputs; none recompute geometry elsewhere.</p>"},{"location":"ROADMAP/#9-day-milestone-plan-scope-man-hours","title":"9-Day Milestone Plan (Scope + Man-Hours)","text":"<p>Total ~5\u20136 focused days of coding spread over 9 calendar days.</p>"},{"location":"ROADMAP/#day-1-phase-7-kickoff-051d","title":"Day 1 \u2014 Phase 7 Kickoff (\u2248 0.5\u20131d)","text":"<ul> <li>Memory store finalization; event logging (phase transitions, contradictions).</li> </ul>"},{"location":"ROADMAP/#day-2-evaluator-integration-051d","title":"Day 2 \u2014 Evaluator Integration (\u2248 0.5\u20131d)","text":"<ul> <li>Link memory store + tensor archive \u2192 evaluator; ensure phase loops (no deadlocks).</li> </ul>"},{"location":"ROADMAP/#day-3-logic-hooks-05d","title":"Day 3 \u2014 Logic Hooks (\u2248 0.5d)","text":"<ul> <li>Math/NLP/sim hooks; safe state mutation without forcing JAM.</li> </ul>"},{"location":"ROADMAP/#day-4-vertical-demos-05d","title":"Day 4 \u2014 Vertical Demos (\u2248 0.5d)","text":"<ul> <li>Legal + Medical reproducible demos; SVG traces.</li> </ul>"},{"location":"ROADMAP/#day-5-nlp-vertical-traces-051d","title":"Day 5 \u2014 NLP Vertical + Traces (\u2248 0.5\u20131d)","text":"<ul> <li>Parser \u2192 \u03bb-logic \u2192 evaluator handshake; keep NLP tests green.</li> </ul>"},{"location":"ROADMAP/#day-6-cli-05d","title":"Day 6 \u2014 CLI (\u2248 0.5d)","text":"<ul> <li><code>lee run ...</code> smoke CLI; <code>--trace</code>, <code>--export</code> flags.</li> </ul>"},{"location":"ROADMAP/#day-7-packaging-05d","title":"Day 7 \u2014 Packaging (\u2248 0.5d)","text":"<ul> <li>README sections, notebook walkthrough, CI config, Dockerfile.</li> </ul>"},{"location":"ROADMAP/#day-8-stress-051d","title":"Day 8 \u2014 Stress (\u2248 0.5\u20131d)","text":"<ul> <li>Full-suite runs on clean env; performance checks; loop edges.</li> </ul>"},{"location":"ROADMAP/#day-9-delivery-pack-05d","title":"Day 9 \u2014 Delivery Pack (\u2248 0.5d)","text":"<ul> <li>One-take demos; zip pack; publish <code>v3.0-demo</code> branch.</li> </ul>"},{"location":"ROADMAP/#local-dev-windows-powershell-quickstart","title":"Local Dev (Windows PowerShell quickstart)","text":"<pre><code># From repo root\npython -m venv .venv\n.\\.venv\\Scripts\\Activate.ps1\npip install -e .\npip install -r requirements-dev.txt  # if present\n\npytest -q     # expect 24/24 green\n</code></pre> <p>Scripts you already have:</p> <pre><code>python scripts\\run_once.py  --expr \"1 -&gt; 0\" --domain legal --log quick\npython scripts\\run_batch.py --file scripts\\inputs.txt --domain legal --log-prefix smoke\npython scripts\\print_last_run.py\npython scripts\\print_timeline_md.py\n</code></pre>"},{"location":"ROADMAP/#mkdocs-mike-versioned-documentation-routine","title":"MkDocs + Mike \u2014 Versioned Documentation Routine","text":"<p>We publish docs to <code>gh-pages</code> using Mike (versioned), surfaced at: <code>https://kilgoretrout111.github.io/logic-evaluation-engine/&lt;version&gt;/</code></p>"},{"location":"ROADMAP/#0-one-time-install","title":"0) One-time install","text":"<pre><code>.\\.venv\\Scripts\\Activate.ps1\npip install mkdocs mkdocs-material mike ghp-import\n</code></pre> <p>Make sure you have <code>mkdocs.yml</code> at repo root (you do), and pages in <code>docs/</code>.</p>"},{"location":"ROADMAP/#1-local-preview","title":"1) Local preview","text":"<pre><code>mkdocs serve -a 127.0.0.1:8000\n# open http://127.0.0.1:8000/\n</code></pre>"},{"location":"ROADMAP/#2-first-time-gh-pages-initialization-safe-path","title":"2) First-time gh-pages initialization (safe path)","text":"<p>If you\u2019ve never pushed docs before or you see \u201cunrelated histories\u201d errors:</p> <pre><code># Ensure remote tracking is fresh\ngit fetch origin\n\n# Initialize gh-pages if missing or broken (empty tree is fine)\ngit checkout --orphan gh-pages\ngit reset --hard\ngit commit --allow-empty -m \"init gh-pages\"\ngit push -u origin gh-pages\n\n# Return to your work branch\ngit switch v3.0\n</code></pre> <p>If <code>gh-pages</code> exists but is incompatible, back it up then recreate: <pre><code>git fetch origin\ngit checkout gh-pages\ngit branch backup/gh-pages-&lt;YYYYMMDD-HHMM&gt;\ngit push origin backup/gh-pages-&lt;YYYYMMDD-HHMM&gt;\ngit switch v3.0\ngit push origin --delete gh-pages\n# Now re-run the init above\n</code></pre></p> <p>(Alternative: use Mike with <code>--ignore-remote-status</code> if you\u2019re sure; the recreate path above is cleaner.)</p>"},{"location":"ROADMAP/#3-deploy-version-30-and-set-default","title":"3) Deploy version 3.0 and set default","text":"<pre><code># From your source branch (v3.0)\nmike deploy --push 3.0\nmike set-default --push 3.0\n\n# Optional alias \"latest\"\nmike deploy --push --update-aliases 3.0 latest\nmike set-default --push latest\n</code></pre> <p>You should now see: - Latest: <code>https://kilgoretrout111.github.io/logic-evaluation-engine/latest/</code> - v3.0:   <code>https://kilgoretrout111.github.io/logic-evaluation-engine/3.0/</code></p>"},{"location":"ROADMAP/#4-update-docs-after-edits","title":"4) Update docs after edits","text":"<pre><code># Edit docs/*.md or mkdocs.yml\nmkdocs build   # sanity check locally\n\n# Publish to the same version\nmike deploy --push --update-aliases 3.0 latest\nmike list      # see what\u2019s published\n</code></pre>"},{"location":"ROADMAP/#5-github-pages-setting-repo-settings-pages","title":"5) GitHub Pages setting (repo \u2192 Settings \u2192 Pages)","text":"<ul> <li>Source: <code>Deploy from a branch</code> </li> <li>Branch: <code>gh-pages</code> (root)</li> </ul> <p>Once set, Pages should update on each Mike deploy.</p>"},{"location":"ROADMAP/#troubleshooting","title":"Troubleshooting","text":"<ul> <li> <p>\u201cgh-pages is unrelated to origin/gh-pages\u201d   Use the backup+recreate flow above, then deploy again.   As a last resort: <code>mike deploy --push --ignore-remote-status 3.0</code> then <code>mike set-default --push latest</code>.</p> </li> <li> <p>\u201cGET /versions.json 404\u201d locally   That\u2019s expected for local serve; Mike writes versions.json on deploy to <code>gh-pages</code>.</p> </li> </ul>"},{"location":"ROADMAP/#ci-already-present","title":"CI (already present)","text":"<p><code>.github/workflows/ci.yaml</code> runs: - Python 3.12/3.13 test matrix: <code>pytest -q</code> - MkDocs build (sanity). Publishing still happens explicitly with <code>mike</code> commands above.</p>"},{"location":"ROADMAP/#definition-of-done-gono-go","title":"Definition of Done (Go/No-Go)","text":"<ul> <li>[ ] Existing tests green (24/24).  </li> <li>[ ] Basis5 tests green (geometry, provenance, memdb).  </li> <li>[ ] JSON result includes <code>basis5.{phases,winding,witness}</code>.  </li> <li>[ ] Provenance transitions carry <code>details.basis5.*</code>; detect carries <code>basis5_witness</code>.  </li> <li>[ ] Patient/case lines include Basis5 totals.  </li> <li>[ ] Docs published to <code>gh-pages</code> for <code>3.0</code> and <code>latest</code>.</li> </ul>"},{"location":"ROADMAP/#handover-notes-fill-at-each-handoff","title":"Handover Notes (fill at each handoff)","text":"<ul> <li>Branch: v3.0  </li> <li>Commit: <code>&lt;hash&gt;</code> </li> <li>Tests: legacy 24/24; Basis5 X/Y  </li> <li>Pages: latest \u2705  3.0 \u2705  </li> <li>Next action: <code>&lt;owner \u2192 task \u2192 date&gt;</code> </li> <li>Known gaps: <code>&lt;short list&gt;</code></li> </ul>"},{"location":"ROADMAP/#credits","title":"Credits","text":"<ul> <li>Basis5 inference and phase geometry by design. LEE simply projects it\u2014no more, no less.</li> </ul>"},{"location":"adapter-hooks/","title":"Adapter Hooks (Legal / Medical)","text":"<p>Goal: keep domain logic thin and explicit. Adapters may enrich signals, but the Basis5 geometry remains the source of phase dynamics.</p>"},{"location":"adapter-hooks/#locations","title":"Locations","text":"<pre><code>src/engine/adapters/\n  base.py      # shared types/helpers (already present)\n  legal.py     # thin legal shim\n  medical.py   # thin medical shim\n</code></pre>"},{"location":"adapter-hooks/#interfaces","title":"Interfaces","text":"<p>Each adapter can expose some/all of the following optional callables. The pipeline probes them with <code>raising=False</code> and proceeds if missing.</p> <pre><code># legal.py\ndef cf_analyze(expr: str) -&gt; dict | None:\n    \"\"\"Optional. Counterfactual analysis (used as an enrichment field).\"\"\"\n\n# medical.py\ndef dm_classify(expr: str) -&gt; str | None:\n    \"\"\"Optional. Divergence/clinical risk classification: e.g. 'low' | 'hi-risk'. \"\"\"\n\ndef ner_extract(expr: str) -&gt; list[dict] | None:\n    \"\"\"Optional. Simple NER results: [{\"text\": \"1\"}, ...].\"\"\"\n</code></pre>"},{"location":"adapter-hooks/#example-stubs-safe-defaults","title":"Example stubs (safe defaults)","text":"<pre><code># src/engine/adapters/legal.py\ndef cf_analyze(expr: str):\n    if \"-&gt;\" in expr or \"IMPLIES\" in expr:\n        return {\"counterfactual\": True}\n    return None\n</code></pre> <pre><code># src/engine/adapters/medical.py\ndef dm_classify(expr: str):\n    return \"low\"\n\ndef ner_extract(expr: str):\n    return []\n</code></pre>"},{"location":"adapter-hooks/#how-the-pipeline-uses-them","title":"How the pipeline uses them","text":"<ul> <li>After prenorm and before detect, the pipeline builds <code>enrichment</code> and includes any adapter outputs under stable keys:</li> <li>Legal: enrichment['counterfactual'] = {...} when present</li> <li>Medical: enrichment['risk'] = 'low'|'hi-risk', enrichment['ner'] = [...]</li> <li>Additionally, enrichment carries basis5_witness projected from the normalized expression.</li> </ul> <p>Resulting provenance detect event (excerpt):</p> <pre><code>{\n  \"kind\": \"detect\",\n  \"phase_after\": \"JAM\",\n  \"details\": {\n    \"enrichment\": {\n      \"domain\": \"legal\",\n      \"pattern\": \"1 -&gt; 0\",\n      \"tags\": [\"implication\",\"boolean\"],\n      \"basis5_witness\": {\"jam\":1,\"detach\":1,\"mp\":1},\n      \"counterfactual\": {\"flag\": \"cf-ok\"}\n    }\n  }\n}\n</code></pre> <p>Adapters remain non-authoritative: they annotate, they do not steer phases.</p>"},{"location":"api/","title":"API (Single-File Reference)","text":"<p>This page lists the small surface LEE exposes in v3.0.</p>"},{"location":"api/#engine","title":"Engine","text":""},{"location":"api/#srcenginepipeline","title":"<code>src.engine.Pipeline</code>","text":"<pre><code>Pipeline(\n    log_name: str,\n    domain: str,                         # 'legal' | 'medical' | ...\n    enable_provenance: bool = True,\n    session: str = \"default\",\n    patient_id: str | None = None,\n    case_id: str | None = None,\n)\n</code></pre> <p>Method</p> <pre><code>run(expr: str) -&gt; dict\n# -&gt; {\n#   \"state\": {\"phase\": \"MEM\"},\n#   \"history\": {\"phases\": [\"ALIVE\",\"JAM\",\"MEM\"], \"run_id\": \"...\"},\n#   \"elapsed_ms\": 0.0,\n#   \"log_json\": \"data/logs/&lt;name&gt;_&lt;ts&gt;.json\",\n#   \"log_svg\":  \"data/logs/&lt;name&gt;_&lt;ts&gt;.svg\"\n# }\n</code></pre> <p>Behavior - Emits provenance start \u2192 prenorm \u2192 enrich \u2192 detect \u2192 transition\u2026 - Writes artifacts next to log_json: .prov.jsonl, .timeline.md, .svg.</p>"},{"location":"api/#basis5-geometry","title":"Basis5 (Geometry)","text":"<p>Module: <code>src.core.basis5</code></p> <pre><code>project_phase(phase: str) -&gt; dict         # {'phase','angle_deg','vec':{'x','y'}}\nrotation_delta_deg(a: str, b: str) -&gt; int # 0|90|180|270\ntransition_basis(a: str, b: str) -&gt; dict  # tensor for a\u2192b\nbuild_winding(phases: list[str]) -&gt; dict  # cumulative rotation + summary\nwitness_basis(expr: str) -&gt; dict          # integer flags\n</code></pre>"},{"location":"api/#evaluator-helpers","title":"Evaluator helpers","text":"<p>Module: <code>src.engine.evaluator</code> (kept minimal)</p> <pre><code>evaluate_expression(text_or_ast, logger=None) -&gt; dict\nevaluate_full(text_or_ast, logger=None) -&gt; dict\n# Internally calls canonicalizer/parser as needed and logs JAM on contradictions.\n</code></pre>"},{"location":"api/#scripts","title":"Scripts","text":"<p>From repo root:</p> <pre><code># One expression \u2192 run artifacts\npython .\\scripts\\run_once.py --expr \"1 -&gt; 0\" --domain legal --log quick\n\n# Many expressions \u2192 CSV\npython .\\scripts\\run_batch.py --file .\\scripts\\inputs.txt --domain legal --log-prefix smoke\n\n# Build Basis5 winding for latest run\npython .\\scripts\\basis5_project.py\n</code></pre> <p>CSV columns (batch): idx, expr, domain, phase, elapsed_ms, log_json</p>"},{"location":"api/#artifacts-on-disk","title":"Artifacts on disk","text":"<pre><code>data/logs/&lt;name&gt;_&lt;ts&gt;.json\ndata/logs/&lt;name&gt;_&lt;ts&gt;.prov.jsonl\ndata/logs/&lt;name&gt;_&lt;ts&gt;.svg\ndata/logs/&lt;name&gt;_&lt;ts&gt;.timeline.md\n</code></pre> <p>Provenance events (JSONL): start, prenorm, enrich, detect, transition, \u2026</p>"},{"location":"api/#stability","title":"Stability","text":"<ul> <li>All APIs here are conservative and already exercised by tests.</li> <li>New features must be projected from Basis5 before they appear here.</li> </ul>"},{"location":"contributing/","title":"Contributing to LEE 3.0","text":"<p>Welcome\u2014keep it lean, exact, and projected from Basis5. If the math doesn\u2019t project it, we don\u2019t code it.</p>"},{"location":"contributing/#repo-setup","title":"Repo setup","text":"<pre><code>git clone https://github.com/KILGORETROUT111/logic-evaluation-engine.git\ncd logic-evaluation-engine\npython -m venv .venv\n.\\.venv\\Scripts\\Activate.ps1\npip install -e .\npytest -q  # should be green\n</code></pre> <p>MkDocs/Mike (docs):</p> <pre><code>pip install mkdocs mkdocs-material mike\nmkdocs serve -a 127.0.0.1:8000\n</code></pre>"},{"location":"contributing/#branches-releases","title":"Branches &amp; releases","text":"<ul> <li>main: frozen snapshot.</li> <li>v3.0 (or next <code>v3.x</code>): active development.</li> <li>Prefer feature branches off v3.0: <code>feat/&lt;slug&gt;</code>, <code>fix/&lt;slug&gt;</code>; PR back into v3.0.</li> </ul> <p>Tagging docs with Mike (example after merge): <pre><code>mike deploy 3.0\nmike set-default 3.0\n</code></pre></p>"},{"location":"contributing/#tests-must-pass","title":"Tests (must pass)","text":"<p>Run everything: <pre><code>pytest -q\n</code></pre></p> <p>Targeted: <pre><code>pytest -q tests/engine/test_phase13_adapters.py -q\npytest -q tests/core/test_contradiction.py -q\n</code></pre></p> <p>Smoke with scripts: <pre><code>python .\\scripts\nun_once.py --expr \"1 -&gt; 0\" --domain legal --log quick\npython .\\scripts\nun_batch.py --file .\\scripts\\inputs.txt --domain legal --log-prefix smoke\n</code></pre></p> <p>Do not add probabilistic checks. Everything is deterministic, integer-based.</p>"},{"location":"contributing/#basis5-contract-contributor-rules","title":"Basis5 contract (contributor rules)","text":"<ul> <li>Phases are ALIVE \u2192 JAM \u2192 MEM on the discrete circle (0\u00b0, 90\u00b0, 180\u00b0).</li> <li>Rotations are multiples of 90\u00b0. Composition is modular.</li> <li>Witness flags are integers <code>{0,1}</code> from syntax; not scores.</li> <li>New behavior must be derived from Basis5 and recorded in provenance:</li> <li>Add transition events with <code>details.basis5</code> (tensor).</li> <li>Add detect/enrich with <code>basis5_witness</code> when applicable.</li> </ul> <p>If you can\u2019t express it as a Basis5 rotation/witness, it\u2019s outside scope.</p>"},{"location":"contributing/#adapters-legalmedical","title":"Adapters (legal/medical)","text":"<p>Adapters live in <code>src/engine/adapters/</code>. They annotate only: - <code>legal.cf_analyze(expr) -&gt; dict|None</code> - <code>medical.dm_classify(expr) -&gt; str|None</code> - <code>medical.ner_extract(expr) -&gt; list[dict]|None</code></p> <p>Pipeline merges adapter output into <code>enrichment</code> but does not let adapters change phases.</p>"},{"location":"contributing/#coding-style","title":"Coding style","text":"<ul> <li>Small, explicit modules. No magic.</li> <li>Keep public surface minimal; prefer internal helpers.</li> <li>Stick to standard library unless there is a Basis5-projected need.</li> <li>Type hints on new/changed code.</li> <li>Logging/provenance: never omit\u2014emit structured events.</li> </ul> <p>Commit messages: conventional-ish <pre><code>feat: basis5 witness for refutation\nfix: ensure MEM recorded in patient summary\ndocs: add adapter-hooks page\nci: add 3.13 job\n</code></pre></p>"},{"location":"contributing/#ci-expectations","title":"CI expectations","text":"<ul> <li>Linting kept light; tests are the contract.</li> <li>Workflows live in <code>.github/workflows/</code>. CI runs tests (3.12/3.13) and builds docs.</li> <li>Red CI = no merge.</li> </ul>"},{"location":"contributing/#docs","title":"Docs","text":"<p>Single-file pages per topic in <code>docs/</code>: - <code>index.md</code> \u2013 concise overview - <code>phase-geometry.md</code> \u2013 Basis5 geometry - <code>adapter-hooks.md</code> \u2013 domain shims - <code>api.md</code> \u2013 public surface - <code>contributing.md</code> \u2013 this page</p> <p>Add to <code>mkdocs.yaml</code> <code>nav</code> as needed. Keep each page focused.</p>"},{"location":"contributing/#artifacts-data","title":"Artifacts &amp; data","text":"<ul> <li>Runtime outputs in <code>data/logs/</code> and <code>data/memdb/</code>. These are ignored by Git.</li> <li>Do not commit large binaries. If needed, link externally and document reproducibility.</li> </ul>"},{"location":"contributing/#security-disclosure","title":"Security &amp; disclosure","text":"<p>No network calls from the engine. If you find a security issue, open a private channel (GitHub Security Advisories) or email the maintainer.</p>"},{"location":"contributing/#pr-checklist","title":"PR checklist","text":"<ul> <li>[ ] Tests pass locally (<code>pytest -q</code>)</li> <li>[ ] Provenance includes Basis5 transitions/enrichment where relevant</li> <li>[ ] Docs updated (if API/behavior surfaces)</li> <li>[ ] No stray artifacts (<code>data/logs/*</code>, <code>*.pyc</code>, <code>__pycache__</code>)</li> <li>[ ] Commit message captures intent</li> </ul>"},{"location":"contributing/#quick-faq","title":"Quick FAQ","text":"<p>Q: Can adapters flip phases? A: No. They annotate, the engine\u2019s Basis5 geometry governs phases.</p> <p>Q: Why no probabilities? A: The math is discrete. Witnesses are integer flags\u2014auditable and stable.</p> <p>Q: Where to add a new domain? A: Create a thin adapter in <code>src/engine/adapters/&lt;domain&gt;.py</code> and write tests that verify enrichment; phases remain Basis5-driven.</p> <p>Thanks for keeping it crisp.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#install","title":"Install","text":"<p>```powershell git clone https://github.com/KILGORETROUT111/logic-evaluation-engine.git cd logic-evaluation-engine python -m venv .venv ..venv\\Scripts\\Activate.ps1 pip install -e .</p>"},{"location":"phase-geometry/","title":"Phase Geometry (Basis5)","text":"<p>This page documents the exact discrete geometry used by LEE 3.0.</p>"},{"location":"phase-geometry/#phases","title":"Phases","text":"Phase Angle Unit Vector ALIVE 0\u00b0 (1, 0) JAM 90\u00b0 (0, 1) MEM 180\u00b0 (-1, 0) <ul> <li>Angles live in \u2124/360\u2124; we only use multiples of 90\u00b0.</li> <li>Vectors are integer unit vectors on \u2124\u00b2. No floats, no amplitudes.</li> </ul>"},{"location":"phase-geometry/#rotations","title":"Rotations","text":"<ul> <li>Allowed deltas: <code>{0, 90, 180, 270}</code> degrees.  </li> <li>Composition is modular addition: <code>\u0394(a\u2192b) = angle(b) - angle(a) mod 360</code>.</li> </ul> <pre><code>from src.core.basis5 import project_phase, rotation_delta_deg, transition_basis\n\nprint(project_phase(\"ALIVE\"))   # {'phase':'ALIVE','angle_deg':0,'vec':{'x':1,'y':0}}\nprint(rotation_delta_deg(\"ALIVE\",\"JAM\"))  # 90\nprint(transition_basis(\"ALIVE\",\"MEM\"))\n# {'before':{...},'after':{...},'delta_deg':180}\n</code></pre>"},{"location":"phase-geometry/#winding-per-run","title":"Winding (per run)","text":"<p><code>build_winding(phases)</code> accumulates the rotation across a phase trace and summarizes it.</p> <pre><code>from src.core.basis5 import build_winding\nw = build_winding([\"ALIVE\",\"JAM\",\"MEM\"])\nprint(w[\"summary\"])\n# {'total_winding_deg': 180, 'avg_vector': {'x': {'num':0,'den':3}, 'y': {'num':1,'den':3}}, 'unique_phases':['ALIVE','JAM','MEM']}\n</code></pre>"},{"location":"phase-geometry/#witness-projection","title":"Witness projection","text":"<p><code>witness_basis(expr)</code> projects integer flags from syntax; e.g. implication (<code>1 -&gt; 0</code>) or local refutation (<code>p &amp; ~p</code>).</p> <pre><code>from src.core.basis5 import witness_basis\nprint(witness_basis(\"1 -&gt; 0\"))     # {'jam':1,'detach':1,'mp':1}\nprint(witness_basis(\"p &amp; ~p\"))     # {'jam':1,'refute':1}\nprint(witness_basis(\"1 -&gt; 1\"))     # {'jam':0}\n</code></pre>"},{"location":"phase-geometry/#invariants","title":"Invariants","text":"<ul> <li>Discrete rotation conservation: closed loops sum to multiples of <code>360\u00b0</code>.</li> <li>Detachment preservation: implication witnesses survive into MEM and are recorded in enrichment/provenance.</li> </ul>"},{"location":"phase-geometry.updated/","title":"Phase Geometry (Basis5)","text":"<p>This page documents the exact discrete geometry used by LEE 3.0.</p>"},{"location":"phase-geometry.updated/#phases","title":"Phases","text":"Phase Angle Unit Vector ALIVE 0\u00b0 (1, 0) JAM 90\u00b0 (0, 1) MEM 180\u00b0 (-1, 0) <ul> <li>Angles live in \u2124/360\u2124; we only use multiples of 90\u00b0.</li> <li>Vectors are integer unit vectors on \u2124\u00b2. No floats, no amplitudes.</li> </ul>"},{"location":"phase-geometry.updated/#rotations","title":"Rotations","text":"<ul> <li>Allowed deltas: <code>{0, 90, 180, 270}</code> degrees.  </li> <li>Composition is modular addition: <code>\u0394(a\u2192b) = angle(b) - angle(a) mod 360</code>.</li> </ul> <pre><code>from src.core.basis5 import project_phase, rotation_delta_deg, transition_basis\n\nprint(project_phase(\"ALIVE\"))   # {'phase':'ALIVE','angle_deg':0,'vec':{'x':1,'y':0}}\nprint(rotation_delta_deg(\"ALIVE\",\"JAM\"))  # 90\nprint(transition_basis(\"ALIVE\",\"MEM\"))\n# {'before':{...},'after':{...},'delta_deg':180}\n</code></pre>"},{"location":"phase-geometry.updated/#winding-per-run","title":"Winding (per run)","text":"<p><code>build_winding(phases)</code> accumulates the rotation across a phase trace and summarizes it.</p> <pre><code>from src.core.basis5 import build_winding\nw = build_winding([\"ALIVE\",\"JAM\",\"MEM\"])\nprint(w[\"summary\"])\n# {'total_winding_deg': 180, 'avg_vector': {'x': {'num':0,'den':3}, 'y': {'num':1,'den':3}}, 'unique_phases':['ALIVE','JAM','MEM']}\n</code></pre>"},{"location":"phase-geometry.updated/#witness-projection","title":"Witness projection","text":"<p><code>witness_basis(expr)</code> projects integer flags from syntax; e.g. implication (<code>1 -&gt; 0</code>) or local refutation (<code>p &amp; ~p</code>).</p> <pre><code>from src.core.basis5 import witness_basis\nprint(witness_basis(\"1 -&gt; 0\"))     # {'jam':1,'detach':1,'mp':1}\nprint(witness_basis(\"p &amp; ~p\"))     # {'jam':1,'refute':1}\nprint(witness_basis(\"1 -&gt; 1\"))     # {'jam':0}\n</code></pre>"},{"location":"phase-geometry.updated/#invariants","title":"Invariants","text":"<ul> <li>Discrete rotation conservation: closed loops sum to multiples of <code>360\u00b0</code>.</li> <li>Detachment preservation: implication witnesses survive into MEM and are recorded in enrichment/provenance.</li> </ul>"},{"location":"phase-geometry.updated/#stressindex","title":"StressIndex","text":"<p>The StressIndex measures accumulated logical strain in a run. It is a function of: - Total winding degrees (cumulative angular displacement across phases) - Transition density (phase changes per unit time/steps) - Jam persistence (duration spent in JAM without resolution)</p> <p>A simple baseline metric:</p> <pre><code>StressIndex = (total_winding_deg / 360) * jam_ratio\n# where jam_ratio = jam_time / run_time\n</code></pre> <p>Interpretation: - Low (&lt;0.2) \u2013 stable reasoning - Moderate (0.2\u20130.5) \u2013 contradictions present, resolvable - High (&gt;0.5) \u2013 potential deadlock or over-constraint</p>"},{"location":"phase-geometry.updated/#resistance","title":"Resistance","text":"<p>Resistance is a measure of opposition to phase change. It increases with: - Mean absolute rotation delta per transition - Number of return cycles to a prior phase state - Prolonged stalls near JAM without resolution</p> <p>Use Resistance alongside StressIndex to diagnose stability under load.</p>"},{"location":"phase-geometry.updated/#figure","title":"Figure","text":""},{"location":"pipeline/","title":"Pipeline","text":""},{"location":"pipeline/#docspipelinemd","title":"docs/pipeline.md","text":"<p>```md</p>"},{"location":"pipeline/#pipeline","title":"Pipeline","text":"<p>```mermaid flowchart LR   A[Input] --&gt; B[Prenorm]   B --&gt; C[Rewrite/NLP]   C --&gt; D[Detect]   D --&gt;|JAM| E[MEM]   D --&gt;|No JAM| E</p>"},{"location":"provenance/","title":"Provenance","text":"<p>When <code>enable_provenance=True</code>, LEE writes: - <code>&lt;log&gt;.prov.jsonl</code> \u2013 line-delimited events - <code>&lt;log&gt;.svg</code> \u2013 compact timeline - <code>&lt;log&gt;.json</code> \u2013 run summary</p> <p>Events you\u2019ll see: <code>start</code>, <code>prenorm</code>, <code>rewrite</code>, <code>enrich</code>, <code>detect</code>, <code>transition</code>.</p> <p>```python from pathlib import Path log = Path(res[\"log_json\"]) print(log.with_suffix(\".prov.jsonl\").read_text().splitlines()[:3])</p>"},{"location":"provenance.updated/","title":"Provenance","text":"<p>When <code>enable_provenance=True</code>, LEE writes: - <code>&lt;log&gt;.prov.jsonl</code> \u2013 line-delimited events - <code>&lt;log&gt;.svg</code> \u2013 compact timeline - <code>&lt;log&gt;.json</code> \u2013 run summary</p> <p>Events you\u2019ll see: <code>start</code>, <code>prenorm</code>, <code>rewrite</code>, <code>enrich</code>, <code>detect</code>, <code>transition</code>.</p> <pre><code>from pathlib import Path\nlog = Path(res[\"log_json\"])\nprint(log.with_suffix(\".prov.jsonl\").read_text().splitlines()[:3])\n\n---\n\n## StressIndex in Provenance\n\nWhen enabled, StressIndex entries appear in `.prov.jsonl` with winding and jam ratio for each run (or window):\n\n```json\n{\"event\":\"stress_index\",\"value\":0.38,\"winding_deg\":180,\"jam_ratio\":0.4}\n</code></pre>"},{"location":"provenance.updated/#winding-and-resistance-in-provenance","title":"Winding and Resistance in Provenance","text":"<ul> <li>Winding is stored as cumulative degrees and average phase vector.  </li> <li>Resistance records cycle counts and mean rotation deltas across repeated transitions.</li> </ul> <p>These metrics enable post-run diagnosis and replay validation.</p>"},{"location":"other/LEE%20v3.0%20Reboot%20Initialization.0%20Reboot%20Initialization/","title":"LEE v3.0 Reboot Initialization","text":""},{"location":"other/LEE%20v3.0%20Reboot%20Initialization.0%20Reboot%20Initialization/#file-srcinitpy","title":"File: src/init.py","text":""},{"location":"other/LEE%20v3.0%20Reboot%20Initialization.0%20Reboot%20Initialization/#purpose-foundational-module-scaffolding-for-self-projective-logic-engine","title":"Purpose: foundational module scaffolding for self-projective logic engine","text":""},{"location":"other/LEE%20v3.0%20Reboot%20Initialization.0%20Reboot%20Initialization/#directory-structure-proposed-and-approved","title":"Directory structure (proposed and approved):","text":""},{"location":"other/LEE%20v3.0%20Reboot%20Initialization.0%20Reboot%20Initialization/#src","title":"src/","text":""},{"location":"other/LEE%20v3.0%20Reboot%20Initialization.0%20Reboot%20Initialization/#core-primitive-logical-structures-and-phase-dynamics","title":"core/          : Primitive logical structures and phase dynamics","text":""},{"location":"other/LEE%20v3.0%20Reboot%20Initialization.0%20Reboot%20Initialization/#analytic-advanced-contradiction-mapping-and-energy-modeling","title":"analytic/      : Advanced contradiction mapping and energy modeling","text":""},{"location":"other/LEE%20v3.0%20Reboot%20Initialization.0%20Reboot%20Initialization/#nlp-language-preprocessing-no-tma","title":"nlp/           : Language preprocessing (no TMA)","text":""},{"location":"other/LEE%20v3.0%20Reboot%20Initialization.0%20Reboot%20Initialization/#engine-execution-engine-memory-evaluation-loop","title":"engine/        : Execution engine, memory, evaluation loop","text":""},{"location":"other/LEE%20v3.0%20Reboot%20Initialization.0%20Reboot%20Initialization/#this-initpy-sets-up-namespace-exposure-and-base-imports","title":"This init.py sets up namespace exposure and base imports","text":""},{"location":"other/LEE%20v3.0%20Reboot%20Initialization.0%20Reboot%20Initialization/#phase-0-core-logic-primitives-and-system-base","title":"Phase 0: Core logic primitives and system base","text":"<p>from .core.expressions import Variable, Lambda, Application, Quantifier from .core.combinators import Y_combinator, Z_combinator from .core.phase_geometry import rotate_phase, PhaseState from .core.contradiction import detect_contradiction, jam_trace from .core.state import make_blank_state, transition_state</p>"},{"location":"other/LEE%20v3.0%20Reboot%20Initialization.0%20Reboot%20Initialization/#phase-1-analytic-dynamics","title":"Phase 1: Analytic dynamics","text":"<p>from .analytic.tensor_archive import archive_tensor, recall_tensor from .analytic.energy_dynamics import compute_lioness_energy from .analytic.counterfactual import rewind_path, replay_path from .analytic.divergence_map import map_logical_divergence</p>"},{"location":"other/LEE%20v3.0%20Reboot%20Initialization.0%20Reboot%20Initialization/#phase-2-nlp-substrate-structural-only","title":"Phase 2: NLP substrate (structural only)","text":"<p>from .nlp.parser import parse_expression from .nlp.rewriter import rewrite_expression from .nlp.scope_inference import infer_scope from .nlp.named_entities import extract_logical_atoms</p>"},{"location":"other/LEE%20v3.0%20Reboot%20Initialization.0%20Reboot%20Initialization/#phase-3-evaluation-engine","title":"Phase 3: Evaluation Engine","text":"<p>from .engine.evaluator import evaluate_full from .engine.memory_store import memory_push, memory_lookup from .engine.event_log import log_event, render_svg_history from .engine.logic_hooks import external_callout</p>"},{"location":"other/LEE%20v3.0%20Reboot%20Initialization.0%20Reboot%20Initialization/#note-all-modules-must-enforce-deterministic-phase-rotation-under-contradiction","title":"Note: All modules must enforce deterministic phase rotation under contradiction.","text":""},{"location":"other/LEE%20v3.0%20Reboot%20Initialization.0%20Reboot%20Initialization/#core-principle-jammed-state-jam-is-the-only-admissible-transition-failure","title":"Core principle: Jammed state (JAM) is the only admissible transition failure,","text":""},{"location":"other/LEE%20v3.0%20Reboot%20Initialization.0%20Reboot%20Initialization/#and-must-yield-reentrant-resolution-through-phase-geometry","title":"and must yield reentrant resolution through Phase Geometry.","text":"<p>all = [     \"Variable\", \"Lambda\", \"Application\", \"Quantifier\",     \"Y_combinator\", \"Z_combinator\",     \"rotate_phase\", \"PhaseState\",     \"detect_contradiction\", \"jam_trace\",     \"make_blank_state\", \"transition_state\",     \"archive_tensor\", \"recall_tensor\",     \"compute_lioness_energy\",     \"rewind_path\", \"replay_path\",     \"map_logical_divergence\",     \"parse_expression\", \"rewrite_expression\",     \"infer_scope\", \"extract_logical_atoms\",     \"evaluate_full\", \"memory_push\", \"memory_lookup\",     \"log_event\", \"render_svg_history\", \"external_callout\" ]</p>"},{"location":"other/LEE_v3.0_Phase9_Analytics_FieldNotes/","title":"LEE v3.0 \u2013 Phase 9 Field Notes","text":"<p>Audience: Executives (Acies), Technologists (Technoids), Practitioners</p>"},{"location":"other/LEE_v3.0_Phase9_Analytics_FieldNotes/#1-executive-summary-acies","title":"1. Executive Summary (Acies)","text":"<p>Phase 9 integrates Business Intelligence (BI) analytics, OLAP-like multidimensional analysis, and event metadata mining into the Logic Evaluation Engine (LEE). The purpose is to make LEE's reasoning auditable, explorable, and actionable for decision support.</p> <p>Why it matters: - Converts raw logical events into structured decision metrics. - Provides traceability of inference chains. - Enables scenario analysis and performance dashboards for inference runs.</p>"},{"location":"other/LEE_v3.0_Phase9_Analytics_FieldNotes/#2-technical-architecture-technoids","title":"2. Technical Architecture (Technoids)","text":""},{"location":"other/LEE_v3.0_Phase9_Analytics_FieldNotes/#core-enhancements","title":"Core Enhancements","text":"<ul> <li>Event Metadata Layer: Structured logging of phase transitions (<code>ALIVE \u2192 JAM \u2192 MEM</code>) with timestamps, phase geometry states, and contradiction flags.</li> <li>Data Mart Extraction: Log output normalized into analytics-friendly schemas (facts + dimensions).</li> <li>OLAP Cubes: Derived aggregates by:</li> <li>Contradiction type</li> <li>Phase resolution time</li> <li>Logical operator frequency</li> <li>Module-specific activity</li> </ul> <p>Pipeline Flow: 1. <code>evaluate_expression()</code> / <code>Pipeline.run()</code> generates events. 2. <code>event_log</code> records normalized entries. 3. Analytics extract runs into external BI/OLAP layer (PowerBI, Tableau, or in-engine Pandas analysis).</p>"},{"location":"other/LEE_v3.0_Phase9_Analytics_FieldNotes/#3-practitioner-workflow","title":"3. Practitioner Workflow","text":"<ol> <li>Run Evaluation as usual.</li> <li>Export Logs via <code>Pipeline.export_log(format=\"csv\")</code> or <code>event_log.to_dataframe()</code>.</li> <li>Analyze with:</li> <li>Pivot tables (Excel / LibreOffice)</li> <li>Jupyter Notebooks</li> <li>BI dashboards (pre-built templates provided in <code>/analytics/bi_templates</code>)</li> </ol> <p>Key Use-Cases: - Spot hot paths: identify inference chains producing the most contradictions. - Audit logic health: monitor % of runs ending in <code>ALIVE</code>, <code>MEM</code>, <code>JAM</code>. - Compare model versions over time for performance regressions.</p>"},{"location":"other/LEE_v3.0_Phase9_Analytics_FieldNotes/#4-next-steps","title":"4. Next Steps","text":"<ul> <li>Phase 10: Introduce temporal OLAP \u2014 ability to slice by time intervals during a single inference run.</li> <li>Integrate witness/disjunction property metrics into analytics schema.</li> <li>Publish Kimball-style star schema for standardization.</li> </ul> <p>Prepared for LEE Specialist Review \u2013 August 2025</p>"},{"location":"other/LEE_v3.0_PhaseKernel_SpecialistNotes/","title":"LEE v3.0 \u2014 Phase Kernel Specialist Notes","text":""},{"location":"other/LEE_v3.0_PhaseKernel_SpecialistNotes/#axioms-four-phase-clock","title":"Axioms (Four-Phase Clock)","text":"<p>Let <code>ClockVal = {Alive, Jam, Mem, Vac}</code>. Reinterpret a 2-ary operator\u2019s truth table as a phase map \u03c7 over rows:</p> <ul> <li>Row (1,1) \u2192 Alive  </li> <li>Row (1,0) \u2192 Jam  </li> <li>Row (0,1) \u2192 Mem  </li> <li>Row (0,0) \u2192 Vac</li> </ul> <p>This is the Occam-minimal structure that distinguishes the unique obstruction row and preserves the remaining rows as coherently evaluable states.</p>"},{"location":"other/LEE_v3.0_PhaseKernel_SpecialistNotes/#obstruction-lemma-sheaf-form","title":"Obstruction Lemma (Sheaf Form)","text":"<p>Fix a small category of contexts <code>E</code> and the presheaf <code>C : E^op \u2192 Sets</code> with local values <code>{\u03c60,\u03c61,\u03c62,\u03c63}</code> mapping to <code>{Alive,Jam,Mem,Vac}</code>, and partial restriction <code>\u03c1(i) = i+1 (mod 4)</code> except <code>\u03c1(1)=\u22a5</code>.</p> <p>Lemma (Non-Gluability of Jam). No global section of <code>C</code> contains Jam. Intuition: Jam blocks restriction; you can\u2019t extend it along morphisms. This is exactly the operational meaning of \u201ccannot proceed with evaluation\u201d.</p>"},{"location":"other/LEE_v3.0_PhaseKernel_SpecialistNotes/#conservation-representation-theorem-class-b","title":"Conservation / Representation Theorem (Class B)","text":"<p>Let <code>B = { O : {0,1}\u00b2 \u2192 {0,1} | O(1,0)=0  and  O(0,q)=1 }</code>. (Material implication is canonical.)</p> <p>Theorem. For every <code>O \u2208 B</code> there exists a unique \u03c7\u2092 : <code>ClockVal \u2192 ClockVal</code> preserving the phase assignment above; conversely, any such \u03c7 reconstructs <code>O</code>. Consequence: Within <code>B</code>, the four-phase kernel is representation-complete for the operator\u2019s structure: no extra logical machinery is needed beyond <code>{Alive,Jam,Mem,Vac}</code>.</p>"},{"location":"other/LEE_v3.0_PhaseKernel_SpecialistNotes/#witness-principle-what-the-engine-proves","title":"Witness Principle (What the Engine Proves)","text":""},{"location":"other/LEE_v3.0_PhaseKernel_SpecialistNotes/#definitions","title":"Definitions","text":"<ul> <li>Local Refutation Witness. A pair of subterms <code>(X, \u00acX)</code> under a conjunctive node exhibits immediate Jam.  </li> <li>Implication Jam Witness. A subterm <code>(p \u2192 q)</code> with <code>p \u2261 1</code> and <code>q \u2261 0</code> (the canonical jam row) exhibits Jam.</li> </ul>"},{"location":"other/LEE_v3.0_PhaseKernel_SpecialistNotes/#witness-theorem-operational","title":"Witness Theorem (Operational)","text":"<p>Given an AST <code>t</code>, <code>core.contradiction.analyze(t)</code> returns: - <code>is_contradiction = True</code>, - <code>mode \u2208 {local-refutation, implication-jam}</code>, - a witness <code>w</code> that is a compact serialization of the exact substructure causing Jam.</p> <p>Soundness (engine-level). If <code>analyze(t)</code> returns a witness, then the pipeline must log Jam and either: - stop, or - archive and transition <code>Jam \u2192 Mem</code> (our Phase-7 behavior).</p> <p>Completeness (within B + refutation schema). If <code>t</code> contains an instance of <code>(1\u21920)</code> or <code>X \u2227 \u00acX</code> in any representation covered by our AST adapters (tuple/dict/operator or the tokenized lambda-<code>Application</code> form), <code>analyze(t)</code> will produce a witness.</p>"},{"location":"other/LEE_v3.0_PhaseKernel_SpecialistNotes/#from-math-to-code-contracts-you-can-enforce","title":"From Math to Code: Contracts You Can Enforce","text":""},{"location":"other/LEE_v3.0_PhaseKernel_SpecialistNotes/#evaluator-contract","title":"Evaluator Contract","text":"<ul> <li>On input AST/text, <code>evaluate_full</code> must:</li> <li>transition <code>MEM \u2192 ALIVE</code> (wake),  </li> <li>run contradiction detection,  </li> <li>if witness exists \u2192 transition <code>ALIVE \u2192 JAM</code> and emit <code>{mode, witness}</code> to the event log.</li> </ul> <p>Invariant I\u2081 (Phase Monotonicity). In a single run: <code>ALIVE</code> precedes <code>JAM</code> precedes <code>MEM</code> if and only if a Jam witness exists.</p>"},{"location":"other/LEE_v3.0_PhaseKernel_SpecialistNotes/#pipeline-contract","title":"Pipeline Contract","text":"<ul> <li>If <code>state.phase == JAM</code>:   a) persist <code>{mode, witness}</code>,   b) optionally call <code>divergence_map.resolve</code> and <code>tensor_archive.store</code> to produce an artifact id,   c) transition <code>JAM \u2192 MEM</code> and log.</li> </ul> <p>Invariant I\u2082 (Archive Completeness). Every JAM event must have a corresponding archive record in memory/log including <code>{mode, witness.pattern}</code> and <code>{artifact_id}</code> if analytics are present.</p>"},{"location":"other/LEE_v3.0_PhaseKernel_SpecialistNotes/#parser-canonicalization-contract-phase-8-task","title":"Parser Canonicalization Contract (Phase 8 task)","text":"<ul> <li>A prepass maps tokenized <code>Application(Variable('1'), '-', '&gt;', '0')</code> to a canonical <code>Imp(1,0)</code> node.  </li> <li>After canonicalization, <code>analyze(ast)</code> succeeds without string heuristics.</li> </ul> <p>Testable Claim C\u2081. For all strings in the grammar of <code>-&gt;, &amp;, ~</code>, canonicalization yields operator nodes recognized by <code>core.contradiction</code>.</p>"},{"location":"other/LEE_v3.0_PhaseKernel_SpecialistNotes/#why-this-is-not-just-another-logic-engine","title":"Why This Is Not \u201cJust Another Logic Engine\u201d","text":"<ol> <li>Obstruction is structural, not exceptional.</li> <li>Sheaf semantics \u2260 slogan.</li> <li>Occam-minimality is formal.</li> <li>Witness makes it operational.</li> </ol>"},{"location":"other/LEE_v3.0_PhaseKernel_SpecialistNotes/#phase-8-proof-obligations","title":"Phase 8: Proof Obligations","text":"<ol> <li>Kernel Soundness (KS)</li> <li>Class-B Completeness (BC)</li> <li>Resolution Correctness (RC)</li> <li>Deterministic Phase History (DPH)</li> </ol>"},{"location":"other/LEE_v3.0_PhaseKernel_SpecialistNotes/#experiments-the-skeptics-cant-hand-wave","title":"Experiments the Skeptics Can\u2019t Hand-Wave","text":"<ul> <li>E\u2081 (Witness/Log Linking)</li> <li>E\u2082 (Operator-Class Test)</li> <li>E\u2083 (Sheaf Obstruction Simulation)</li> <li>E\u2084 (Canon vs Fallback)</li> </ul>"},{"location":"other/LEE_v3.0_PhaseKernel_SpecialistNotes/#what-to-ship-in-phase-8","title":"What to Ship in Phase 8","text":"<ul> <li>Canonicalization pass</li> <li>Real archive bridge</li> <li>Tiny WHNF \u03b2-reducer + pre-normalization hook</li> <li>Log+SVG of <code>ALIVE \u2192 JAM(witness.pattern) \u2192 MEM(artifact_id)</code></li> </ul> <p>Exit criteria: - 100% passing unit tests - Fallback never used in canonicalized parse tests - Archive true for any detected Jam</p>"},{"location":"other/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2/","title":"Project LEE-3.0 Status \u2014 10/08/25 15:48 UTC+2","text":""},{"location":"other/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2/#overview","title":"Overview","text":"<p>This log summarizes the development phases completed on 10 August 2025, as part of the LEE v3.0 reboot cycle, targeting initial public demo readiness.</p>"},{"location":"other/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2/#phase-completions-today","title":"\u2705 Phase Completions Today","text":""},{"location":"other/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2/#phase-12-memdb-integration","title":"Phase 12 \u2014 MEMDB Integration","text":"<ul> <li>Goal: Introduce a lightweight in-memory + JSONL-based database for recording diagnostic and contradiction outcomes for legal and medical use cases.</li> <li>Core Additions:</li> <li><code>memdb.py</code> minimal implementation (unified, patient, and case records).</li> <li>JSONL append and export to CSV in <code>data/analytics/</code>.</li> <li>Command-line interface:<ul> <li><code>python -m src.engine.memdb report</code></li> <li><code>python -m src.engine.memdb export</code></li> </ul> </li> <li>Pipeline Patch:</li> <li>Extended <code>Pipeline</code> to accept <code>patient_id</code>, <code>case_id</code>, and <code>domain</code> metadata.</li> <li>Auto-store MEM phase outcomes to MEMDB if IDs present.</li> <li>Tests Implemented:</li> <li><code>tests/engine/test_phase12_memdb.py</code></li> <li><code>tests/engine/test_phase12_5_memdb_export.py</code></li> <li>Verified round-trip storage and CSV export.</li> </ul>"},{"location":"other/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2/#verification","title":"\ud83d\udcca Verification","text":"<ul> <li>Tests: All related unit tests pass (<code>pytest -q</code> clean).</li> <li>Manual Runs: Multiple runs for both medical and legal cases, confirmed in MEMDB report.</li> <li>CSV Export: File generated successfully at:</li> </ul>"},{"location":"other/docs_phase10_notes/","title":"LEE v3.0 \u2014 Phase 10 Scaffold","text":""},{"location":"other/docs_phase10_notes/#goal","title":"Goal","text":"<p>Make the engine introspective and self-auditing without breaking the green test suite.</p>"},{"location":"other/docs_phase10_notes/#new-modules","title":"New modules","text":"<ul> <li><code>src/engine/provenance.py</code> \u2014 in-memory provenance recorder (attach later to Pipeline).</li> <li><code>src/engine/audit.py</code> \u2014 convert EventLog JSON to JSONL / Markdown / Graphviz DOT.</li> <li><code>src/engine/replay.py</code> \u2014 rebuild timeline (phases, last JAM witness) from EventLog JSON.</li> </ul>"},{"location":"other/docs_phase10_notes/#integration-optional-safe","title":"Integration (optional, safe)","text":"<ul> <li>Construct <code>ProvenanceRecorder(run_id)</code> inside <code>Pipeline.__init__</code> (behind a flag).</li> <li>At key points (parse, canon, reduce, detect, archive, transition), call <code>prov.record(...)</code>.</li> <li>On run end, dump <code>provenance.to_jsonl()</code> next to the EventLog files.</li> </ul>"},{"location":"other/docs_phase10_notes/#why-this-order","title":"Why this order","text":"<p>1) No behavior change \u2014 the scaffold is passive utilities. 2) Audit-first \u2014 we can ship human-readable timelines immediately. 3) Replay-ready \u2014 testing and BI can work off logs without re-running the engine.</p>"},{"location":"other/docs_phase10_notes/#next-phase-10-proper","title":"Next (Phase 10 proper)","text":"<ul> <li>Wire provenance into Pipeline with a feature flag.</li> <li>Add unit tests that assert presence/shape of provenance rows (behind an env flag to keep base tests green).</li> <li>Extend <code>resolution</code> with strategy versions and policy flags for better analytics.</li> </ul>"},{"location":"status/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2%202/","title":"Project LEE-3.0 Status \u2014 09\u201310/08/25","text":""},{"location":"status/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2%202/#overview","title":"Overview","text":"<p>This log covers development milestones from 9 August 2025 through 10 August 2025 for the LEE v3.0 reboot cycle, aligned to the roadmap toward public demo readiness.</p>"},{"location":"status/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2%202/#phase-completions","title":"\u2705 Phase Completions","text":""},{"location":"status/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2%202/#phase-12-memdb-integration-10-aug-2025","title":"Phase 12 \u2014 MEMDB Integration (10 Aug 2025)","text":"<ul> <li>Objective: Introduce an in-memory + JSONL database to persist phase results for legal and medical diagnostic contexts.</li> <li>Core Deliverables:</li> <li><code>src/engine/memdb.py</code><ul> <li>Unified record store + patient/case segmented files.</li> <li>Append-on-write for JSONL; optional CSV export.</li> <li>CLI:</li> <li><code>python -m src.engine.memdb report</code></li> <li><code>python -m src.engine.memdb export</code></li> </ul> </li> <li>Pipeline Enhancements:<ul> <li>Added <code>patient_id</code>, <code>case_id</code>, <code>domain</code> arguments.</li> <li>Auto-store MEM phase results into MEMDB if IDs present.</li> </ul> </li> <li> <p>Tests Implemented:</p> <ul> <li><code>tests/engine/test_phase12_memdb.py</code></li> <li><code>tests/engine/test_phase12_5_memdb_export.py</code></li> <li>Round-trip persistence + CSV export verified.</li> </ul> </li> <li> <p>Verification:</p> </li> <li>All related unit tests pass (<code>pytest -q</code> clean).</li> <li>Manual runs confirmed MEMDB storage for both legal and medical cases.</li> <li>CSV generated at <code>data/analytics/memdb_export.csv</code>.</li> </ul>"},{"location":"status/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2%202/#pipeline-stability-patch-09-aug-2025","title":"Pipeline Stability Patch (09 Aug 2025)","text":"<ul> <li>Objective: Address indentation and import scope errors affecting <code>Pipeline.run</code>.</li> <li>Actions:</li> <li>Normalized indentation to spaces across file.</li> <li>Fixed <code>memdb</code> reference scope to avoid <code>UnboundLocalError</code>.</li> <li>Added defensive checks for MEMDB activation in pipeline run loop.</li> <li>Verification:</li> <li>Smoke tests for Phase 10\u201312 pass.</li> <li>No regressions in Phase 5\u201311 execution.</li> </ul>"},{"location":"status/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2%202/#test-framework-cleanup-09-aug-2025","title":"Test Framework Cleanup (09 Aug 2025)","text":"<ul> <li>Objective: Ensure clean test runs without stale bytecode or <code>__pycache__</code> conflicts.</li> <li>Actions:</li> <li>Integrated pre-test cleanup commands:     <pre><code>Get-ChildItem -Recurse -Directory -Filter \"__pycache__\" | Remove-Item -Recurse -Force\nGet-ChildItem -Recurse -Filter \"*.pyc\" | Remove-Item -Force\n</code></pre></li> <li>Removed orphan <code>.pyc</code> files causing false test failures.</li> </ul>"},{"location":"status/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2%202/#current-data-snapshot","title":"\ud83d\udcca Current Data Snapshot","text":"<p>MEMDB Report (truncated):</p>"},{"location":"status/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2/","title":"Project LEE-3.0 Status \u2014 10/08/25 15:48 UTC+2","text":""},{"location":"status/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2/#overview","title":"Overview","text":"<p>This log summarizes the development phases completed on 10 August 2025, as part of the LEE v3.0 reboot cycle, targeting initial public demo readiness.</p>"},{"location":"status/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2/#phase-completions-today","title":"\u2705 Phase Completions Today","text":""},{"location":"status/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2/#phase-12-memdb-integration","title":"Phase 12 \u2014 MEMDB Integration","text":"<ul> <li>Goal: Introduce a lightweight in-memory + JSONL-based database for recording diagnostic and contradiction outcomes for legal and medical use cases.</li> <li>Core Additions:</li> <li><code>memdb.py</code> minimal implementation (unified, patient, and case records).</li> <li>JSONL append and export to CSV in <code>data/analytics/</code>.</li> <li>Command-line interface:<ul> <li><code>python -m src.engine.memdb report</code></li> <li><code>python -m src.engine.memdb export</code></li> </ul> </li> <li>Pipeline Patch:</li> <li>Extended <code>Pipeline</code> to accept <code>patient_id</code>, <code>case_id</code>, and <code>domain</code> metadata.</li> <li>Auto-store MEM phase outcomes to MEMDB if IDs present.</li> <li>Tests Implemented:</li> <li><code>tests/engine/test_phase12_memdb.py</code></li> <li><code>tests/engine/test_phase12_5_memdb_export.py</code></li> <li>Verified round-trip storage and CSV export.</li> </ul>"},{"location":"status/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2/#verification","title":"\ud83d\udcca Verification","text":"<ul> <li>Tests: All related unit tests pass (<code>pytest -q</code> clean).</li> <li>Manual Runs: Multiple runs for both medical and legal cases, confirmed in MEMDB report.</li> <li>CSV Export: File generated successfully at: Structure includes:</li> <li><code>run_id</code>, <code>session</code>, <code>patient_id</code>, <code>case_id</code>, <code>domain</code>, <code>final_phase</code>, <code>time_to_mem_ms</code>, <code>ts_end</code>, <code>ts_written</code>, <code>jam</code></li> </ul>"},{"location":"status/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2/#dependencies-structural-notes","title":"\ud83e\udde9 Dependencies / Structural Notes","text":"<ul> <li>CSV contains 1-to-many relationship (patient row + case row for same run_id when both provided).</li> <li>Timestamps are valid ISO-8601 but mix <code>+00:00</code> and <code>Z</code> suffix.</li> <li>JAM metadata embedded as JSON string.</li> </ul>"},{"location":"status/Project%20LEE-3.0%20Status%20%E2%80%94%2010.08.25%2015.48%20UTC%2B2/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<ol> <li>Timestamp Uniformity \u2014 standardize on <code>Z</code> or <code>+00:00</code> format.</li> <li>Optional Aggregation \u2014 add export mode for 1-row-per-run_id consolidated view.</li> <li>BI/Analytics Hook \u2014 evaluate MEMDB as source for PACI/JAM dashboards.</li> <li>OLAP/OLTP Model \u2014 begin mapping MEMDB output into star-schema for legal/medical analytics.</li> </ol> <p>Prepared: 10 Aug 2025, 15:48 CET Author: William Alexander Patterson</p>"},{"location":"status/Project-Lee-3.0-Daily%20Status%20Log/","title":"Project LEE-3.0 \u2014 Daily Status Log","text":"<p>Date: DD/MM/YYYY Time: HH:MM (UTC or local) Author: Alexander Patterson  </p>"},{"location":"status/Project-Lee-3.0-Daily%20Status%20Log/#summary","title":"\ud83d\udccc Summary","text":""},{"location":"status/Project-Lee-3.0-Daily%20Status%20Log/#completed-today","title":"\u2705 Completed Today","text":"<ul> <li>[ ] Phase(s) worked on:</li> <li>[ ] Features added:</li> <li>[ ] Bugs fixed:</li> <li>[ ] Tests added/passed:</li> </ul>"},{"location":"status/Project-Lee-3.0-Daily%20Status%20Log/#work-in-progress","title":"\ud83d\udd04 Work in Progress","text":"<ul> <li>[ ] Components still in development:</li> <li>[ ] Pending code reviews:</li> <li>[ ] Partial implementations waiting for data:</li> </ul>"},{"location":"status/Project-Lee-3.0-Daily%20Status%20Log/#blockers-issues","title":"\ud83d\udea7 Blockers / Issues","text":"<ul> <li>[ ] Technical issues:</li> <li>[ ] Resource/coordination issues:</li> <li>[ ] External dependencies:</li> </ul>"},{"location":"status/Project-Lee-3.0-Daily%20Status%20Log/#test-build-status","title":"\ud83d\udcca Test &amp; Build Status","text":"<ul> <li>Unit Tests: X passed / X failed</li> <li>Integration Tests: X passed / X failed</li> <li>Performance Metrics: (if applicable)</li> </ul>"},{"location":"status/Project-Lee-3.0-Daily%20Status%20Log/#files-modules-changed","title":"\ud83d\udcc2 Files / Modules Changed","text":"<ul> <li><code>src/engine/...</code> \u2014 description</li> <li><code>src/analytic/...</code> \u2014 description</li> <li><code>tests/...</code> \u2014 description</li> </ul>"},{"location":"status/Project-Lee-3.0-Daily%20Status%20Log/#next-steps","title":"\ud83d\udcc5 Next Steps","text":"<ul> <li>[ ] Planned for tomorrow:</li> <li>[ ] Medium-term goals:</li> <li>[ ] Long-term goals:</li> </ul> <p>Log generated for branch: <code>v3</code> </p>"},{"location":"status/project-LEE-3.0-status-090825-100825/","title":"Project LEE-3.0 Changelog","text":""},{"location":"status/project-LEE-3.0-status-090825-100825/#2025-08-10","title":"[2025-08-10]","text":"<ul> <li>Phase 12 MEMDB Integration</li> <li>Added in-memory + JSONL persistence for phase results.</li> <li>CSV export + CLI commands (<code>report</code>, <code>export</code>).</li> <li>Unit tests for storage + export pass.</li> <li>Pipeline Patch</li> <li>Fixed indentation/import scope bugs.</li> <li>Added MEMDB activation checks.</li> <li>Test Cleanup</li> <li>Removed stale bytecode and <code>__pycache__</code>.</li> </ul>"},{"location":"status/project-LEE-3.0-status-090825-100825/#2025-08-09","title":"[2025-08-09]","text":"<ul> <li>Patched <code>Pipeline.run</code> to eliminate <code>UnboundLocalError</code>.</li> <li>Began MEMDB integration scaffolding.</li> </ul>"}]}